/* vNet Example 2, Data Transmission

	Two nodes sends data via ethernet connection, they can be connected
	to a switch or cross-wired togheter.

	*************************Definitions*************************
	Configuration file		Parameter
	vNet_Config.h			#define VNET_SUPERNODE  	0
	vNet_Config.h			#define VNET_MEDIA1_ENABLE  1
	vNet_Config.h			#define VNET_MEDIA2_ENABLE  0
	vNet_Config.h			#define VNET_MEDIA3_ENABLE  0
	vNet_Config.h			#define VNET_MEDIA4_ENABLE  0
	vNet_Config.h			#define VNET_MEDIA5_ENABLE  0
	
	Define the ethernet controller based on the used hardware,
	ethUsrCfg.h				#define ETH_W5100/ENC28J60	1	
	
	ethUsrCfg.h				const uint8_t DEFAULT_BASEIPADDRESS[] = {...}
	ethUsrCfg.h				const uint8_t DEFAULT_SUBMASK[]       = {...}
	ethUsrCfg.h				const uint8_t DEFAULT_GATEWAY[]       = {...}
	ethUsrCfg.h				const uint8_t MAC_ADDRESS[]           = {...}	
	
	It's important define the proper MAC address for each board, two nodes
	that share the same MAC address will not communicate. You can found a
	proper MAC address on the sticker behind the board.
	
	As alternative to address the MAC for each board, the AUTO_MAC option can
	be used along with a Local MAC address. More details are available in
	ethUsrCfg.h configuration file.
	
	Only if debug on serial port is required,
	vNet_Config.h			#define VNET_DEBUG  		1
  
*/
#include "Souliss.h"
#include "Typicals.h"
#include <SPI.h>

oFrame frame;

void setup()
{	
	vNet_Init_M5();
	vNet_SetAddress_M5(0xCE01);
	
vNet_Init_M3();
vNet_SetAddress_M3(0xab02);
	oFrame_Define(&frame);
}

void loop()
{ 

  // if any data is received, then print it to the terminal
  if (vNet_DataAvailable_M5())
  {
    uint8_t buf[VNET_MAX_PAYLOAD];  // store the received data in here
    uint8_t len;
    uint8_t used_media;
	
    len = vNet_RetrieveData_M5(buf);

    if((len>0))
    { 
      oFrame_Set(0, buf, 0, len, 0);
       vNet_Send_M3(0xab01, &frame, len);
    }
  }
  
  
  delay(50);
}